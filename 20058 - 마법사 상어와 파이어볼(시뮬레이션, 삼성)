package com.core.hello;
import java.util.*;
class Main{
    static class Point{
        int x, y;
        public Point(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    static int n, q;
    static int max = Integer.MIN_VALUE;
    static boolean[][] visit;
    static int size;
    static int[][] arr;
    static int[][] temp;
    static int dir[][] = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    static Queue<Integer> magic = new LinkedList<>();
    static Queue<Point> queue = new LinkedList<>();
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        q = scan.nextInt();
        size = (int) Math.pow(2, n);
        arr = new int[size][size];
        temp = new int[size][size];
        visit = new boolean[size][size];
        for (int i = 0; i < size; i++)
            for (int j = 0; j < size; j++)
                arr[i][j] = scan.nextInt();
        for (int i = 0; i < q; i++)
            magic.offer(scan.nextInt());
        while (q-- > 0) {
            int now = magic.poll();
            int num = (int) Math.pow(2, now);
            for (int i = 0; i < size; i += num) {
                for (int j = 0; j < size; j += num) {
                    temp = new int[size][size];
                    rotate(i, j, num);
                }
            }
            melt();
        }

    }
    static void rotate(int x, int y, int t){
        for(int i = x; i < x + t; i++)
            for(int j = y; j < y + t; j++)
                temp[j][]
    }
    static void melt(){
        int[][] ans = temp.clone();
        for(int i = 0; i < size; i++){
            for(int j = 0; j < size; j++){
                int cnt = 0;
                if(temp[i][j] == 0)
                    continue;
                for(int k = 0; k < 4; k++){
                    int nx = i + dir[k][0];
                    int ny = j + dir[k][1];
                    if(nx < 0 || ny < 0 || nx >= size || ny >= size)
                        continue;
                    if(arr[nx][ny] > 0)
                        cnt++;
                }
                if(cnt < 3){
                    ans[i][j]--;
                }
            }
        }
    }
}
